{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SeamLess This is the documentation for the combined Ambisonics and WFS system at Humboldt Forum , Berlin. It provides basic information and guidelines for artists, as well as extended instructions for engineers and system administrators. If you want to know more about the concept, continue here: Concept If you are interested in using the system from a Reaper session, continue here: Reaper Userguide All software components are organized in a dedicated repository: SeamLess 2021 - TU Studio Team: Henrik von Coler Paul Schuladen Nils Tonn\u00e4tt","title":"SeamLess"},{"location":"#seamless","text":"This is the documentation for the combined Ambisonics and WFS system at Humboldt Forum , Berlin. It provides basic information and guidelines for artists, as well as extended instructions for engineers and system administrators. If you want to know more about the concept, continue here: Concept If you are interested in using the system from a Reaper session, continue here: Reaper Userguide","title":"SeamLess"},{"location":"#all-software-components-are-organized-in-a-dedicated-repository-seamless","text":"2021 - TU Studio Team: Henrik von Coler Paul Schuladen Nils Tonn\u00e4tt","title":"All software components are organized in a dedicated repository: SeamLess"},{"location":"about/","text":"About the System Concept The Ethnomusicology Museum at the newly built Humboldt Forum features a listening room for immersive illustration of relevant auditory content. It is unique in that it combines multiple methods for sound field synthesis, mainly Wave Field Synthesis (WFS) and Higher Order Ambisonics (HOA), thus providing an enhanced spatial experience. A dedicated software system, developed by the Audiocommunication Group at TU Berlin, allows a seamless integration of these methods. Loudspeaker Configuration The listening room features 32 WFS panels by Four Audio . This results in a total of 256 WFS channels, using 768 tweeters and 64 woofers. Both arcs hold 16 panels each, mounted as a continuous ribbon above head height with a horizontal speaker distance of 10 cm. 45 Genelec 8020C speakers are arranged in three levels on each arc, used for Ambisonics rendering. Top view of the listening room with the entrances (left,right) and two arcs, each with a ribbon of WFS panels (gray). Side view of a single arc with the ribbon of WFS panels (gray) and the Ambisonics speakers (black). Fundamentals of Spatialization The Virtual Sound Source The combined system works with so called virtual sound sources , also referred to as the object oriented approach of sound spatialization. The figure below shows the model of such such a virtual sound source, which is defined by its position, using two angles, the distance and a source width. Every sound event in a project or composition can be connected to such a virtual sound source, allowing to place it in the listening space. Depending on the preferred workflow, different tools can be used for a dynamic arrangement of the individual sound sources. The provided tools in Reaper grant a quick entry by providing control through simple automation trajectories in a DAW project. The Send-System In addition to the position of the virtual sound source, the proposed approach also allows the continuous fade of sound events between the Ambisonics and the WFS rendering through a send system.","title":"About the System"},{"location":"about/#about-the-system","text":"","title":"About the System"},{"location":"about/#concept","text":"The Ethnomusicology Museum at the newly built Humboldt Forum features a listening room for immersive illustration of relevant auditory content. It is unique in that it combines multiple methods for sound field synthesis, mainly Wave Field Synthesis (WFS) and Higher Order Ambisonics (HOA), thus providing an enhanced spatial experience. A dedicated software system, developed by the Audiocommunication Group at TU Berlin, allows a seamless integration of these methods.","title":"Concept"},{"location":"about/#loudspeaker-configuration","text":"The listening room features 32 WFS panels by Four Audio . This results in a total of 256 WFS channels, using 768 tweeters and 64 woofers. Both arcs hold 16 panels each, mounted as a continuous ribbon above head height with a horizontal speaker distance of 10 cm. 45 Genelec 8020C speakers are arranged in three levels on each arc, used for Ambisonics rendering. Top view of the listening room with the entrances (left,right) and two arcs, each with a ribbon of WFS panels (gray). Side view of a single arc with the ribbon of WFS panels (gray) and the Ambisonics speakers (black).","title":"Loudspeaker Configuration"},{"location":"about/#fundamentals-of-spatialization","text":"","title":"Fundamentals of Spatialization"},{"location":"about/#the-virtual-sound-source","text":"The combined system works with so called virtual sound sources , also referred to as the object oriented approach of sound spatialization. The figure below shows the model of such such a virtual sound source, which is defined by its position, using two angles, the distance and a source width. Every sound event in a project or composition can be connected to such a virtual sound source, allowing to place it in the listening space. Depending on the preferred workflow, different tools can be used for a dynamic arrangement of the individual sound sources. The provided tools in Reaper grant a quick entry by providing control through simple automation trajectories in a DAW project.","title":"The Virtual Sound Source"},{"location":"about/#the-send-system","text":"In addition to the position of the virtual sound source, the proposed approach also allows the continuous fade of sound events between the Ambisonics and the WFS rendering through a send system.","title":"The Send-System"},{"location":"adt-decoders/","text":"ADT Decoders Standalone decoders for Ambisonics are built with the Ambisonics Decoder Toolbox and SC-HOA. Generate Matlab/Octave Code The SC directory includes scripts for generating Matlab/Octave code to be used by the ADT, named: make_..._HOA.sc Changes in the speaker configuration are easiest applied in the arrays within these scripts. The script generates scrips in the ADT directory: adt/examples/run_dec_EN325_DOME.m Run Matlab/Octave Code Create the Faust files (.dsp) and use them to build the SC classes by running: $ octave run_dec_EN325_DOME.m Results will be located in adt/decoders Rund Faust build Script Build the standalone decoders (JACK clients) by running the script in Standalone_Decoders/ : $ ./faust-build.sh","title":"ADT Decoders"},{"location":"adt-decoders/#adt-decoders","text":"Standalone decoders for Ambisonics are built with the Ambisonics Decoder Toolbox and SC-HOA.","title":"ADT Decoders"},{"location":"adt-decoders/#generate-matlaboctave-code","text":"The SC directory includes scripts for generating Matlab/Octave code to be used by the ADT, named: make_..._HOA.sc Changes in the speaker configuration are easiest applied in the arrays within these scripts. The script generates scrips in the ADT directory: adt/examples/run_dec_EN325_DOME.m","title":"Generate Matlab/Octave Code"},{"location":"adt-decoders/#run-matlaboctave-code","text":"Create the Faust files (.dsp) and use them to build the SC classes by running: $ octave run_dec_EN325_DOME.m Results will be located in adt/decoders","title":"Run Matlab/Octave Code"},{"location":"adt-decoders/#rund-faust-build-script","text":"Build the standalone decoders (JACK clients) by running the script in Standalone_Decoders/ : $ ./faust-build.sh","title":"Rund Faust build Script"},{"location":"oscrouter/","text":"OSC-Router and Processor The OSC-Router written in python serves as central interface for OSC-messages in a multiclient spatial rendering environment. It automatically translates incoming OSC-messages to match the expected formats of the rendering-engines and distributes it to all connected clients including UI-Clients and Data-clients for automation data. Quick-Info Port: 4455 There are 32 sources which can be set via the following messages: Messages with source-index in osc-address: Position /source/1/xyz fff /source/1/aed fff Gain /source/1/ambi f /source/1/wfs f /source/1/reverb f Messages with source index as argument: Position /source/xyz ifff /source/aed ifff Gain /source/ambi if /source/wfs if /source/reverb if Possible coordinate prefixes: Polar (angles in degree -180:180) aed, ae, ad, ed, azim, elev, dist Cartesian xyz, xy, xz, yz, x, y, z OSC-Router config The OSC-Router is started by executing the MAIN_oscrouter.py . Per default it loads the configurationfile oscRouterConfig.txt in the same folder. With the argument --config another file can be loaded. The configfile consists of a number of blocks which are divided with *** . For more information have a look at configSample.txt It provides an additional debug option: using the option --oscdebug followed by a string with ip and port (e.g. --oscdebug \"192.168.3.2:55112\" ) an additional OSC-listener can be defined, which receives a copy of every OSC-message sent out by the OSC-router. accepted OSC messages port:4455 The Osc-Router accepts various message formats and take care of converting them to the right format. Every OSC-Message consists of a OSC-Address Prefix followed by a number of values. Here we only work with integer- (i) and float-values (f) Source IDs begins with Index 1 and can go up to 32. The following examples demonstrate which OSC-Messages are accepted for position data. Source ID can be in the OSC-Prefix /source/1/aed f f f with f f f = azimuth elevation distance Or part of the Message-Values /source/xyz i f f f with i f f f = sID x y z The last component of the OSC-Prefix defines the coordinate format. Besides full sets of coordinates single coordinate values can be send too /source/azim i f , /source/1/x f as well as pairs /source/1/ad f f , /source/xy i f f Polar and Cartesian formats will automatically converted according to the target renderer. A gain-send value has to be given which is the amount of audio sent to a specific rendering module (e.g. Ambisonics, WFS). /source/send/spatial i i f with i i f = sourceID renderingID gain(linear) If confgured in the config file the gains can also be set with the name of the renderer: * /source/1/wfs f * /source/1/ambi f * /source/1/rev f secondary Port Port: 4007 The secondary port has basically the same function as the main port 4455 but messages coming in on the main port are causing messages on the secondary port to be ignored for 2sec (configurable in the config-file). This happens separately for each source. Subcription-Protocol Subcription-Port: 4999 Source-Data-Port: 4455 The connection is initialised by a subscricption-request from the client which is followed by a regular ping-message from the OSC-router that must by answered by a pong-message in order to keep the subscription alive. Source-Position and gain messages should be sent to port 4455 and the subcription-messages to port 4999. Subscribe A client can subscribe to all position and gain messages e.g. a viewer-client during production process. Subcriptions and pong messages should be send to port 4999. The connection is initialised via: /oscrouer/subscribe s i s (i i) with s = uniqueClientName, i=listeningPort, s=coordinateFormat, i=sourceIndexInOsc(0/1), i=minUpdateIntervall The last three arguments are optional and are set to '1 10' by default. e.g. /oscrouter/subscribe maxViewer 55123 xyz 1 10 will send source-position messages to the subscribing client as follows: * For Position /source/1/xyz fff with a max. rate of 100Hz (every 10 ms). * For gains e.g. /source/1/ambi f The ip-Address of the client is retrieved automatically from the udp-packet by the OSC-Router. ### ping-pong The osc-router send the message /oscrouter/ping 4999 which should be answered (to port 4999) with /oscrouter/pong uniqueClientName The uniqueClientName has to be the same as in the subcription message. If the client does not answer to the ping message he will be erased after a certain time. Debug functions Port: 4999 A copy of all outgoing osc-messages from the osc-router can requested by sending: /oscrouter/debug/osccopy ipAddress:port with ipAddress and listening port of the receiving machine e.g. /oscrouter/debug/osccopy 192.168.3.2:55112 The debug-osc messages contain the name of the target as well as ip-address and port. To deactivate this send a message without target address: /oscrouter/debug/osccopy With the message /oscrouter/debug/verbose i a verbosity level can be set which activates console printing of incoming and outcoming messages as well as further informations. Set verbosity to 0 when to stop console output which can significantly slow down the system.","title":"OSC Router"},{"location":"oscrouter/#osc-router-and-processor","text":"The OSC-Router written in python serves as central interface for OSC-messages in a multiclient spatial rendering environment. It automatically translates incoming OSC-messages to match the expected formats of the rendering-engines and distributes it to all connected clients including UI-Clients and Data-clients for automation data.","title":"OSC-Router and Processor"},{"location":"oscrouter/#quick-info","text":"Port: 4455 There are 32 sources which can be set via the following messages:","title":"Quick-Info"},{"location":"oscrouter/#messages-with-source-index-in-osc-address","text":"Position /source/1/xyz fff /source/1/aed fff Gain /source/1/ambi f /source/1/wfs f /source/1/reverb f","title":"Messages with source-index in osc-address:"},{"location":"oscrouter/#messages-with-source-index-as-argument","text":"Position /source/xyz ifff /source/aed ifff Gain /source/ambi if /source/wfs if /source/reverb if","title":"Messages with source index as argument:"},{"location":"oscrouter/#possible-coordinate-prefixes","text":"Polar (angles in degree -180:180) aed, ae, ad, ed, azim, elev, dist Cartesian xyz, xy, xz, yz, x, y, z","title":"Possible coordinate prefixes:"},{"location":"oscrouter/#osc-router-config","text":"The OSC-Router is started by executing the MAIN_oscrouter.py . Per default it loads the configurationfile oscRouterConfig.txt in the same folder. With the argument --config another file can be loaded. The configfile consists of a number of blocks which are divided with *** . For more information have a look at configSample.txt It provides an additional debug option: using the option --oscdebug followed by a string with ip and port (e.g. --oscdebug \"192.168.3.2:55112\" ) an additional OSC-listener can be defined, which receives a copy of every OSC-message sent out by the OSC-router.","title":"OSC-Router config"},{"location":"oscrouter/#accepted-osc-messages","text":"port:4455 The Osc-Router accepts various message formats and take care of converting them to the right format. Every OSC-Message consists of a OSC-Address Prefix followed by a number of values. Here we only work with integer- (i) and float-values (f) Source IDs begins with Index 1 and can go up to 32. The following examples demonstrate which OSC-Messages are accepted for position data. Source ID can be in the OSC-Prefix /source/1/aed f f f with f f f = azimuth elevation distance Or part of the Message-Values /source/xyz i f f f with i f f f = sID x y z The last component of the OSC-Prefix defines the coordinate format. Besides full sets of coordinates single coordinate values can be send too /source/azim i f , /source/1/x f as well as pairs /source/1/ad f f , /source/xy i f f Polar and Cartesian formats will automatically converted according to the target renderer. A gain-send value has to be given which is the amount of audio sent to a specific rendering module (e.g. Ambisonics, WFS). /source/send/spatial i i f with i i f = sourceID renderingID gain(linear) If confgured in the config file the gains can also be set with the name of the renderer: * /source/1/wfs f * /source/1/ambi f * /source/1/rev f","title":"accepted OSC messages"},{"location":"oscrouter/#secondary-port","text":"Port: 4007 The secondary port has basically the same function as the main port 4455 but messages coming in on the main port are causing messages on the secondary port to be ignored for 2sec (configurable in the config-file). This happens separately for each source.","title":"secondary Port"},{"location":"oscrouter/#subcription-protocol","text":"Subcription-Port: 4999 Source-Data-Port: 4455 The connection is initialised by a subscricption-request from the client which is followed by a regular ping-message from the OSC-router that must by answered by a pong-message in order to keep the subscription alive. Source-Position and gain messages should be sent to port 4455 and the subcription-messages to port 4999.","title":"Subcription-Protocol"},{"location":"oscrouter/#subscribe","text":"A client can subscribe to all position and gain messages e.g. a viewer-client during production process. Subcriptions and pong messages should be send to port 4999. The connection is initialised via: /oscrouer/subscribe s i s (i i) with s = uniqueClientName, i=listeningPort, s=coordinateFormat, i=sourceIndexInOsc(0/1), i=minUpdateIntervall The last three arguments are optional and are set to '1 10' by default. e.g. /oscrouter/subscribe maxViewer 55123 xyz 1 10 will send source-position messages to the subscribing client as follows: * For Position /source/1/xyz fff with a max. rate of 100Hz (every 10 ms). * For gains e.g. /source/1/ambi f The ip-Address of the client is retrieved automatically from the udp-packet by the OSC-Router. ### ping-pong The osc-router send the message /oscrouter/ping 4999 which should be answered (to port 4999) with /oscrouter/pong uniqueClientName The uniqueClientName has to be the same as in the subcription message. If the client does not answer to the ping message he will be erased after a certain time.","title":"Subscribe"},{"location":"oscrouter/#debug-functions","text":"Port: 4999 A copy of all outgoing osc-messages from the osc-router can requested by sending: /oscrouter/debug/osccopy ipAddress:port with ipAddress and listening port of the receiving machine e.g. /oscrouter/debug/osccopy 192.168.3.2:55112 The debug-osc messages contain the name of the target as well as ip-address and port. To deactivate this send a message without target address: /oscrouter/debug/osccopy With the message /oscrouter/debug/verbose i a verbosity level can be set which activates console printing of incoming and outcoming messages as well as further informations. Set verbosity to 0 when to stop console output which can significantly slow down the system.","title":"Debug functions"},{"location":"paths/","text":"OSC Paths In their current version, the plugins use the following OSC paths for sending and receiving messages. Spatial All spatial control messages get two arguments: the ID of the source to control (starting at index 1) the position (cuurently ranging from -10 to 10 meters). X Position /source/pos/x i f Y Position /source/pos/y i f Z Position /source/pos/z i f Bus Send OSC messages for the send gains of the channels take three arguments: the ID of the source to control (starting at index 1) the index of the bus to send to (starting at 0 OR 1) the gain (ranging from 0 to 1) /send/gain i i f","title":"OSC Paths"},{"location":"paths/#osc-paths","text":"In their current version, the plugins use the following OSC paths for sending and receiving messages.","title":"OSC Paths"},{"location":"paths/#spatial","text":"All spatial control messages get two arguments: the ID of the source to control (starting at index 1) the position (cuurently ranging from -10 to 10 meters).","title":"Spatial"},{"location":"paths/#x-position","text":"/source/pos/x i f","title":"X Position"},{"location":"paths/#y-position","text":"/source/pos/y i f","title":"Y Position"},{"location":"paths/#z-position","text":"/source/pos/z i f","title":"Z Position"},{"location":"paths/#bus-send","text":"OSC messages for the send gains of the channels take three arguments: the ID of the source to control (starting at index 1) the index of the bus to send to (starting at 0 OR 1) the gain (ranging from 0 to 1) /send/gain i i f","title":"Bus Send"},{"location":"plugins/","text":"SeamLess Plugins The SeamLess Plugins are designed to control SeamLess , which combines multiple methods for spatial sound reproduction. They are currently being tested as VST3 on both Linux and MAC systems with Reaper as the standard DAW. For automating system parameters from a DAW, multiple instances of the Client Plugin are needed. For remote OSC control of the automations, a single instance of the Main Plugin is required. Client Plugin For controlling the properties of multiple sound sources, a Client Plugin needs to be added to each channel of a DAW project. It does not process audio. The Source Index needs to be set for each individual instance. Indices should not be duplicated. All instances share the same Outgoing Connection properties. Each Client Plugin sends all parameters at a fixed send rate of 50 Hz, if not disabled. Main Plugin If included, the Main Plugin needs to be added to the project before all Client Plugins . It does not process any audio and can be added to any channel or bus. The only parameter to be set is the port on which to listen for incoming OSC messages.","title":"Plugins"},{"location":"plugins/#seamless-plugins","text":"The SeamLess Plugins are designed to control SeamLess , which combines multiple methods for spatial sound reproduction. They are currently being tested as VST3 on both Linux and MAC systems with Reaper as the standard DAW. For automating system parameters from a DAW, multiple instances of the Client Plugin are needed. For remote OSC control of the automations, a single instance of the Main Plugin is required.","title":"SeamLess Plugins"},{"location":"plugins/#client-plugin","text":"For controlling the properties of multiple sound sources, a Client Plugin needs to be added to each channel of a DAW project. It does not process audio. The Source Index needs to be set for each individual instance. Indices should not be duplicated. All instances share the same Outgoing Connection properties. Each Client Plugin sends all parameters at a fixed send rate of 50 Hz, if not disabled.","title":"Client Plugin"},{"location":"plugins/#main-plugin","text":"If included, the Main Plugin needs to be added to the project before all Client Plugins . It does not process any audio and can be added to any channel or bus. The only parameter to be set is the port on which to listen for incoming OSC messages.","title":"Main Plugin"},{"location":"reaper/","text":"Working with Reaper The most accessible way of using the SeamLess system is a single DAW session from a laptop, just as working with any other multi-track audio project. Reaper is used as the standard software in most projects and recommended. Other solutions are possible but not fully tested. Each audio track in a Reaper project is directly routed to the system with DANTE and connected to a virtual sound source. Source position and additional properties can be controlled and automated as any other parameter. This workflow ensures that content can be prepared in advance and ported to the system afterwards. Audio-Sources in general An audio-source in a spatial audio-system is defined by the audio content and the source attributes, like the position of the source. Depending on the used rendering-module in the HuFo-System (WFS, Ambisonics, Reverb) additional attributes can be defined, e.g. plane wave and Doppler effect for the WFS module. The rendering modules are running parallel for all sources. Which rendering module is used can be determined with the additional \"send to\" parameters, which control the amount of the audio-signal being sent to a specific rendering module. In that way a fades from on to another system as well as mixtures can be realized. By definition all Audio-Sources are Mono-Audio sources and best results in spatial precision are achieved by sending all audio-element to a single audio source. Of course stereo or other multichannel material can be used too, by using audio sources as virtual speakers which are rendered by the system. Audio Sources in REAPER For defining an audio-source in REAPER, a Plugin is used for sending the source attributes via OSC synchronized to the audio playback (here OSCar by IRCAM is used). Every audio source is identified by an ID (1-64) which is set in the plugin and corresponds to the channel the audio is sent out. This also means every instance of the plugins represents one audio source. The output of the audio tracks should be set be sent to a mono channel, either as direct hardware output or if you are using bus-systems to a mono channel on the bus-track. Content Production Process In the production process the automation data can either be written with the pencil tool inside of REAPER. Also a dedicated interface-client or hardware controllers can be used, which connect also to the central OSC router. The OSC messages are then distributed to the REAPER-plugin where it can be written using the Reaper's automation modes. Since it is not defined which state the sources have at the beginning of the playback all source-attributes must be set at the beginning of the project. For more information about the OSC-Data have a look in the chapter OSC-Router. Content Playback The result of a production is a multichannel audio file in which the plugin automation data will be embedded with REAPER's Take FX function. This file including the automations will be saved in Reaper Project Bay from it then can be pasted and arranged in a playback project. For the project-export a Reaperscript is provided which automates the rendering and data-embedding process.","title":"Reaper User Guide"},{"location":"reaper/#working-with-reaper","text":"The most accessible way of using the SeamLess system is a single DAW session from a laptop, just as working with any other multi-track audio project. Reaper is used as the standard software in most projects and recommended. Other solutions are possible but not fully tested. Each audio track in a Reaper project is directly routed to the system with DANTE and connected to a virtual sound source. Source position and additional properties can be controlled and automated as any other parameter. This workflow ensures that content can be prepared in advance and ported to the system afterwards.","title":"Working with Reaper"},{"location":"reaper/#audio-sources-in-general","text":"An audio-source in a spatial audio-system is defined by the audio content and the source attributes, like the position of the source. Depending on the used rendering-module in the HuFo-System (WFS, Ambisonics, Reverb) additional attributes can be defined, e.g. plane wave and Doppler effect for the WFS module. The rendering modules are running parallel for all sources. Which rendering module is used can be determined with the additional \"send to\" parameters, which control the amount of the audio-signal being sent to a specific rendering module. In that way a fades from on to another system as well as mixtures can be realized. By definition all Audio-Sources are Mono-Audio sources and best results in spatial precision are achieved by sending all audio-element to a single audio source. Of course stereo or other multichannel material can be used too, by using audio sources as virtual speakers which are rendered by the system.","title":"Audio-Sources in general"},{"location":"reaper/#audio-sources-in-reaper","text":"For defining an audio-source in REAPER, a Plugin is used for sending the source attributes via OSC synchronized to the audio playback (here OSCar by IRCAM is used). Every audio source is identified by an ID (1-64) which is set in the plugin and corresponds to the channel the audio is sent out. This also means every instance of the plugins represents one audio source. The output of the audio tracks should be set be sent to a mono channel, either as direct hardware output or if you are using bus-systems to a mono channel on the bus-track.","title":"Audio Sources  in REAPER"},{"location":"reaper/#content-production-process","text":"In the production process the automation data can either be written with the pencil tool inside of REAPER. Also a dedicated interface-client or hardware controllers can be used, which connect also to the central OSC router. The OSC messages are then distributed to the REAPER-plugin where it can be written using the Reaper's automation modes. Since it is not defined which state the sources have at the beginning of the playback all source-attributes must be set at the beginning of the project. For more information about the OSC-Data have a look in the chapter OSC-Router.","title":"Content Production Process"},{"location":"reaper/#content-playback","text":"The result of a production is a multichannel audio file in which the plugin automation data will be embedded with REAPER's Take FX function. This file including the automations will be saved in Reaper Project Bay from it then can be pasted and arranged in a playback project. For the project-export a Reaperscript is provided which automates the rendering and data-embedding process.","title":"Content Playback"},{"location":"reverb/","text":"https://www.openair.hosted.york.ac.uk/?page_id=722","title":"Reverb"},{"location":"signalflow/","text":"Signal Flow The following flow chart visualizes the interconnection between the software components. Scroll down to get the exact input and output assignment. Input-Output Assignment Linux: MAIN (DANTE) Inputs Source 001-032 Source channels from Mac Book 033-036 Direct to 1st order HOA 037-052 Direct to 3rd order HOA 053 Direct to SUB 065-096 Source channels from Mac Book 097-100 Direct to 1st order HOA 101-115 Direct to 3rd order HOA 116 Direct to SUB Outputs Target 1-22 DAC 1 (Ambisonics speakers 1-22) 23-44 DAC 2 (Ambisonics speakers 23-44) 45 DAC 1 (Ambisonics spekaer 45) 46-47 DAC 1 (SUB 1-2) 48-49 DAC 2 (SUB 3-4)","title":"Signal Flow"},{"location":"signalflow/#signal-flow","text":"The following flow chart visualizes the interconnection between the software components. Scroll down to get the exact input and output assignment.","title":"Signal Flow"},{"location":"signalflow/#input-output-assignment","text":"","title":"Input-Output Assignment"},{"location":"signalflow/#linux-main-dante","text":"Inputs Source 001-032 Source channels from Mac Book 033-036 Direct to 1st order HOA 037-052 Direct to 3rd order HOA 053 Direct to SUB 065-096 Source channels from Mac Book 097-100 Direct to 1st order HOA 101-115 Direct to 3rd order HOA 116 Direct to SUB Outputs Target 1-22 DAC 1 (Ambisonics speakers 1-22) 23-44 DAC 2 (Ambisonics speakers 23-44) 45 DAC 1 (Ambisonics spekaer 45) 46-47 DAC 1 (SUB 1-2) 48-49 DAC 2 (SUB 3-4)","title":"Linux: MAIN (DANTE)"},{"location":"supercollider/","text":"SuperCollider Mixing, signal distribution and Ambisonics encoding in the SeamLess System is based on SuperCollider. Two main scripts are used: HuFo_SERVER.scd HuFo_SERVER is the central distribution instance for the source signals, as well as for Ambisonics encoding. SC IO Assignment The following assignment is only valid for the 3rd order configuration: Inputs Description 00-63 raw audio input Outputs Description 00-63 WFS input channels 64-79 HOA encoded 80-83 FOA encoded reverb 84 sub send HuFo_WFS.scd HuFo_WFS is a mixing and distribution instance for the source signals, limited to WFS for use on the additional WFS rendering servers. Starting Both instances are take the same optional input arguments: $ sclang HuFo_SERVER.scd <N_inputs> <server_port> $ sclang HuFo_WFS.scd <N_inputs> <server_port> Defaults: N_inputs: 64 server_port: 58010 Setting Up Build Decoders Decoders in ADT have a problem for more than speakers 24? speakers. Use standalone decoder in that case. Install Decoders Copy the directory decoders to the SC user extension directory. It can be obtained in SC: Platform.userExtensionDir For larger loudspeaker setups (<24), standalone Jack decoders are used. SuperCollider OSC Paths The sueprcollider mixer listens to several OSC messages for signal routing and conrolling positions Sends To Ambisonics + WFS /source/send/spatial i i f first argument = channel ID second argument = system ID 0 = Ambisonics (inside SC) 1 = WFS (external, WONDER) To Subwoofer /source/send/direct i i f first argument = channel ID second argument = output ID 0 = Subwoofer Ambisonics Spatial Control /source/pos/azim i f first argument = channel ID second argument = angle (rad) /source/pos/elev i f first argument = channel ID second argument = angle (rad) /source/pos/dist i f first argument = channel ID second argument = distance (meters) /source/pos/aed i f f f first argument = channel ID second argument = azimuth (degree) third argument = elevation (degree) fourth argument = distance (meters)","title":"SuperCollider"},{"location":"supercollider/#supercollider","text":"Mixing, signal distribution and Ambisonics encoding in the SeamLess System is based on SuperCollider. Two main scripts are used:","title":"SuperCollider"},{"location":"supercollider/#hufo_serverscd","text":"HuFo_SERVER is the central distribution instance for the source signals, as well as for Ambisonics encoding.","title":"HuFo_SERVER.scd"},{"location":"supercollider/#sc-io-assignment","text":"The following assignment is only valid for the 3rd order configuration: Inputs Description 00-63 raw audio input Outputs Description 00-63 WFS input channels 64-79 HOA encoded 80-83 FOA encoded reverb 84 sub send","title":"SC IO Assignment"},{"location":"supercollider/#hufo_wfsscd","text":"HuFo_WFS is a mixing and distribution instance for the source signals, limited to WFS for use on the additional WFS rendering servers.","title":"HuFo_WFS.scd"},{"location":"supercollider/#starting","text":"Both instances are take the same optional input arguments: $ sclang HuFo_SERVER.scd <N_inputs> <server_port> $ sclang HuFo_WFS.scd <N_inputs> <server_port> Defaults: N_inputs: 64 server_port: 58010","title":"Starting"},{"location":"supercollider/#setting-up","text":"","title":"Setting Up"},{"location":"supercollider/#build-decoders","text":"Decoders in ADT have a problem for more than speakers 24? speakers. Use standalone decoder in that case.","title":"Build Decoders"},{"location":"supercollider/#install-decoders","text":"Copy the directory decoders to the SC user extension directory. It can be obtained in SC: Platform.userExtensionDir For larger loudspeaker setups (<24), standalone Jack decoders are used.","title":"Install Decoders"},{"location":"supercollider/#supercollider-osc-paths","text":"The sueprcollider mixer listens to several OSC messages for signal routing and conrolling positions","title":"SuperCollider OSC Paths"},{"location":"supercollider/#sends","text":"","title":"Sends"},{"location":"supercollider/#to-ambisonics-wfs","text":"/source/send/spatial i i f first argument = channel ID second argument = system ID 0 = Ambisonics (inside SC) 1 = WFS (external, WONDER)","title":"To Ambisonics + WFS"},{"location":"supercollider/#to-subwoofer","text":"/source/send/direct i i f first argument = channel ID second argument = output ID 0 = Subwoofer","title":"To Subwoofer"},{"location":"supercollider/#ambisonics-spatial-control","text":"/source/pos/azim i f first argument = channel ID second argument = angle (rad) /source/pos/elev i f first argument = channel ID second argument = angle (rad) /source/pos/dist i f first argument = channel ID second argument = distance (meters) /source/pos/aed i f f f first argument = channel ID second argument = azimuth (degree) third argument = elevation (degree) fourth argument = distance (meters)","title":"Ambisonics Spatial Control"},{"location":"wonder/","text":"Wonder Generic information about Wonder is found in the Wonder documentation . Panel Setup EN325 HuFo","title":"WFS/WONDER"},{"location":"wonder/#wonder","text":"Generic information about Wonder is found in the Wonder documentation .","title":"Wonder"},{"location":"wonder/#panel-setup","text":"","title":"Panel Setup"},{"location":"wonder/#en325","text":"","title":"EN325"},{"location":"wonder/#hufo","text":"","title":"HuFo"},{"location":"showcontrol/showcontrol/","text":"ShowControl ShowControl can be used via OSC messages (used by the SeamLessControl GUI application) or by using the web interface. SystemD services ShowControl usually starts as a systemd user service. showcontrol : Scheduler, OSC server, Web Interface The web interface using the Gtk broadway web backend is deprecated. It was managed by systemd user services too. seamlesscontrol : SeamLessControl GUI application as web service broadwayd : Gtk web backend OSC Commands /showcontrol/pause f 1.0 : Sends stop and mute message to Reaper and jumps to first video to get a black image 0.0 : Resumes schedule /showcontrol/track i track number : Pause schedule, unmute reaper and play track number track number /play f Receives playing state from Reaper. This is only meant as a callback. It's not supposed to be used directly. 1.0 : Set playing state to True and resume video players 0.0 : Set playing state to False and pause video players /showcontrol/reboot f Not tested yet! Doesn't work probably because the showcontrol machine is part of this is list, but it doesn't make sure that itself is the last one. 1.0 : Reboots all system machines from showcontrol_config.yml ShowControl YAML Syntax Filename: showcontrol_config.yml The ShowControl config file set ip and port of Reaper's and of ShowControl's OSC servers. Every machine of the seamless installation is listed with name, ip, user and used services. For the specifics of the syntax look at the Humboldt Forum configuration. Schedule YAML Syntax Filename: schedule.yml The schedule file consists of events with following structure: - audio_index : 1 command : play day_of_week : 0,1,2,3,4,5,6 hour : 9 minute : 0 second : 0 video_index : 0 The schedule.yml can be generated from a blockplan.yml , blocks and tracks files with the schedule_generator.py script. Tracks All tracks are found in the tracks directory. Beside the scheduling information like audio and video indices and duration, there are descriptive information like the title in German and English and a description. This information is to be used for the generation of the infopanel SVGs. Track example file: brunnen : title : Brunnen der Sonne title_en : Well of the Sun audio_index : 2 video_index : 1 duration : minutes : 16 seconds : 14 description : > Brunnen description text Blocks Tracks are grouped in blocks. Blocks have a overall length in minutes and a track padding in seconds. Example block file: default : length : 80 track_padding : 10 tracks : 1 : trailer 2 : brunnen 3 : sufi 4 : trailer 5 : oksus 6 : datenerhebung Blockplan There's only one blockplan.yml in use currently. It's just a list of blocks. Blockplan file: default : blocks : 1 : default 2 : default 3 : default 4 : default","title":"General"},{"location":"showcontrol/showcontrol/#showcontrol","text":"ShowControl can be used via OSC messages (used by the SeamLessControl GUI application) or by using the web interface.","title":"ShowControl"},{"location":"showcontrol/showcontrol/#systemd-services","text":"ShowControl usually starts as a systemd user service. showcontrol : Scheduler, OSC server, Web Interface The web interface using the Gtk broadway web backend is deprecated. It was managed by systemd user services too. seamlesscontrol : SeamLessControl GUI application as web service broadwayd : Gtk web backend","title":"SystemD services"},{"location":"showcontrol/showcontrol/#osc-commands","text":"/showcontrol/pause f 1.0 : Sends stop and mute message to Reaper and jumps to first video to get a black image 0.0 : Resumes schedule /showcontrol/track i track number : Pause schedule, unmute reaper and play track number track number /play f Receives playing state from Reaper. This is only meant as a callback. It's not supposed to be used directly. 1.0 : Set playing state to True and resume video players 0.0 : Set playing state to False and pause video players /showcontrol/reboot f Not tested yet! Doesn't work probably because the showcontrol machine is part of this is list, but it doesn't make sure that itself is the last one. 1.0 : Reboots all system machines from showcontrol_config.yml","title":"OSC Commands"},{"location":"showcontrol/showcontrol/#showcontrol-yaml-syntax","text":"Filename: showcontrol_config.yml The ShowControl config file set ip and port of Reaper's and of ShowControl's OSC servers. Every machine of the seamless installation is listed with name, ip, user and used services. For the specifics of the syntax look at the Humboldt Forum configuration.","title":"ShowControl YAML Syntax"},{"location":"showcontrol/showcontrol/#schedule-yaml-syntax","text":"Filename: schedule.yml The schedule file consists of events with following structure: - audio_index : 1 command : play day_of_week : 0,1,2,3,4,5,6 hour : 9 minute : 0 second : 0 video_index : 0 The schedule.yml can be generated from a blockplan.yml , blocks and tracks files with the schedule_generator.py script.","title":"Schedule YAML Syntax"},{"location":"showcontrol/showcontrol/#tracks","text":"All tracks are found in the tracks directory. Beside the scheduling information like audio and video indices and duration, there are descriptive information like the title in German and English and a description. This information is to be used for the generation of the infopanel SVGs. Track example file: brunnen : title : Brunnen der Sonne title_en : Well of the Sun audio_index : 2 video_index : 1 duration : minutes : 16 seconds : 14 description : > Brunnen description text","title":"Tracks"},{"location":"showcontrol/showcontrol/#blocks","text":"Tracks are grouped in blocks. Blocks have a overall length in minutes and a track padding in seconds. Example block file: default : length : 80 track_padding : 10 tracks : 1 : trailer 2 : brunnen 3 : sufi 4 : trailer 5 : oksus 6 : datenerhebung","title":"Blocks"},{"location":"showcontrol/showcontrol/#blockplan","text":"There's only one blockplan.yml in use currently. It's just a list of blocks. Blockplan file: default : blocks : 1 : default 2 : default 3 : default 4 : default","title":"Blockplan"},{"location":"showcontrol/webcontrol/","text":"WebControl SeamLess ShowControl offers a web interface. It resembles what is possible with the OSC interface but has also a user management system. initialize DB after installation Before using the ShowControl software, the user management database must be created: export FLASK_APP = webcontrol cd /usr/local/share/seamless/ShowControl flask init-db","title":"WebControl"},{"location":"showcontrol/webcontrol/#webcontrol","text":"SeamLess ShowControl offers a web interface. It resembles what is possible with the OSC interface but has also a user management system.","title":"WebControl"},{"location":"showcontrol/webcontrol/#initialize-db-after-installation","text":"Before using the ShowControl software, the user management database must be created: export FLASK_APP = webcontrol cd /usr/local/share/seamless/ShowControl flask init-db","title":"initialize DB after installation"},{"location":"system/system_setup/","text":"Setting up the System Python Dependencies pip3 install oscpy SuperCollider 1: Build and install SC 2: Build a headless version of SC: Follow https://github.com/supercollider/supercollider/blob/develop/README_LINUX.md but call cmake: cmake -DCMAKE_BUILD_TYPE=Release -DNATIVE=ON -DSC_EL=no -DSC_ABLETON_LINK=off -NO_X11=ON -DSC_QT=OFF .. Install SC3-Plugins: https://github.com/supercollider/sc3-plugins Install SC-HOA classes: Quarks.install(\"https://github.com/florian-grond/SC-HOA\") Build Faust Reverb Faust code for the Ambisonics reverb is located in Faust/reverb . The install script builds and installs the SuperCollider class and objects to the user extensions directory. Make sure install ruby before using the Faust to SC compiler. Developer Mode The scripts supercollider_gui.sh and supercollider_nogui.sh allow to switch between the standard SC install and the headless version by setting symlinks in /usr/local/bin Once the standard version is lionked, scide can be started for development and debugging. Seamless installation For the installation of SeamLess the Meson build system is used. Create build directory: meson builddir Set SeamLess location (e.g. EN325, HUFO): cd builddir meson configure -Dlocation = HUFO Installation: sudo meson install Create symlink to specific snapshot: cd /etc/seamless ln -s snapshots/wfs1.snap aj_snapshot_config.xml WONDER installation WONDER also uses Meson. meson builddir cd builddir meson configure -Dlocation = HUFO meson compile sudo meson install Disable unneeded things Turn off dbus activated jack For using the seamless_jack system service it might be necessary to turn off the dbus activated jack daemon: jack_control stop Comment out jackdbus auto in /usr/share/dbus-1/services/org.jackaudio.service : [ D-BUS Service ] Name = org.jackaudio.service #Exec=/usr/bin/jackdbus auto Turn off pulseaudio Pulseaudio runs as user service and should be masked. systemctl --user stop pulseaudio.socket systemctl --user stop pulseaudio.service systemctl --user mask pulseaudio.socket systemctl --user mask pulseaudio.service Disable Automatic Updates Automatic updates are not desired, since they can change the system behavior. In addition can disable the DANTE drivers. Edit: /etc/apt/apt.conf.d/20auto-upgrades It needs to be: APT::Periodic::Update-Package-Lists \"0\"; APT::Periodic::Download-Upgradeable-Packages \"0\"; APT::Periodic::AutocleanInterval \"0\"; APT::Periodic::Unattended-Upgrade \"0\"; Turn off graphical user interface sudo systemctl set-default multi-user Add user to audio group Add the user to the audio group: audio:x:29:pulse,user","title":"Setup"},{"location":"system/system_setup/#setting-up-the-system","text":"","title":"Setting up the System"},{"location":"system/system_setup/#python-dependencies","text":"pip3 install oscpy","title":"Python Dependencies"},{"location":"system/system_setup/#supercollider","text":"1: Build and install SC 2: Build a headless version of SC: Follow https://github.com/supercollider/supercollider/blob/develop/README_LINUX.md but call cmake: cmake -DCMAKE_BUILD_TYPE=Release -DNATIVE=ON -DSC_EL=no -DSC_ABLETON_LINK=off -NO_X11=ON -DSC_QT=OFF .. Install SC3-Plugins: https://github.com/supercollider/sc3-plugins Install SC-HOA classes: Quarks.install(\"https://github.com/florian-grond/SC-HOA\")","title":"SuperCollider"},{"location":"system/system_setup/#build-faust-reverb","text":"Faust code for the Ambisonics reverb is located in Faust/reverb . The install script builds and installs the SuperCollider class and objects to the user extensions directory. Make sure install ruby before using the Faust to SC compiler.","title":"Build Faust Reverb"},{"location":"system/system_setup/#developer-mode","text":"The scripts supercollider_gui.sh and supercollider_nogui.sh allow to switch between the standard SC install and the headless version by setting symlinks in /usr/local/bin Once the standard version is lionked, scide can be started for development and debugging.","title":"Developer Mode"},{"location":"system/system_setup/#seamless-installation","text":"For the installation of SeamLess the Meson build system is used. Create build directory: meson builddir Set SeamLess location (e.g. EN325, HUFO): cd builddir meson configure -Dlocation = HUFO Installation: sudo meson install Create symlink to specific snapshot: cd /etc/seamless ln -s snapshots/wfs1.snap aj_snapshot_config.xml","title":"Seamless installation"},{"location":"system/system_setup/#wonder-installation","text":"WONDER also uses Meson. meson builddir cd builddir meson configure -Dlocation = HUFO meson compile sudo meson install","title":"WONDER installation"},{"location":"system/system_setup/#disable-unneeded-things","text":"","title":"Disable unneeded things"},{"location":"system/system_setup/#turn-off-dbus-activated-jack","text":"For using the seamless_jack system service it might be necessary to turn off the dbus activated jack daemon: jack_control stop Comment out jackdbus auto in /usr/share/dbus-1/services/org.jackaudio.service : [ D-BUS Service ] Name = org.jackaudio.service #Exec=/usr/bin/jackdbus auto","title":"Turn off dbus activated jack"},{"location":"system/system_setup/#turn-off-pulseaudio","text":"Pulseaudio runs as user service and should be masked. systemctl --user stop pulseaudio.socket systemctl --user stop pulseaudio.service systemctl --user mask pulseaudio.socket systemctl --user mask pulseaudio.service","title":"Turn off pulseaudio"},{"location":"system/system_setup/#disable-automatic-updates","text":"Automatic updates are not desired, since they can change the system behavior. In addition can disable the DANTE drivers. Edit: /etc/apt/apt.conf.d/20auto-upgrades It needs to be: APT::Periodic::Update-Package-Lists \"0\"; APT::Periodic::Download-Upgradeable-Packages \"0\"; APT::Periodic::AutocleanInterval \"0\"; APT::Periodic::Unattended-Upgrade \"0\";","title":"Disable Automatic Updates"},{"location":"system/system_setup/#turn-off-graphical-user-interface","text":"sudo systemctl set-default multi-user","title":"Turn off graphical user interface"},{"location":"system/system_setup/#add-user-to-audio-group","text":"Add the user to the audio group: audio:x:29:pulse,user","title":"Add user to audio group"},{"location":"system/timeshift/","text":"Backup with Timeshift TimeShift offers a command line interface, but using the GUI is recommended. As TimeShit must be run as root and you are usually logged in via SSH, you have to enable X11 forwarding for root before running timeshift-gtk : $ xauth list $DISPLAY host/unix:10 MIT-MAGIC-COOKIE-1 742d024faeb3d29a15ff06f1b8c3b21e $ echo $DISPLAY localhost:10.0 $ sudo -s # xauth add host/unix:10 MIT-MAGIC-COOKIE-1 742d024faeb3d29a15ff06f1b8c3b21e # export DISPLAY=localhost:10.0 # timeshift-gtk Booting different EFI entries Every machine has a ~Playback~ and a ~Development~ (~Entwicklung~) installation. They are on separate drives. On PS-1 you can repeatedly press F12 on startup to get to the EFI boot menu. efibootmgr -v efibootmgr -c -d /dev/sda -p 1 -L 'SATA Entwicklung' -l '\\EFI\\ubuntu\\shimx64.efi' efibootmgr -c -d /dev/nvme0n1 -p 1 -L 'NVME Playback' -l '\\EFI\\ubuntu\\shimx64.efi' efibootmgr -n 0001 efibootmgr -o 0002,0004,0008,0009,000A,000B","title":"Backup"},{"location":"system/timeshift/#backup-with-timeshift","text":"TimeShift offers a command line interface, but using the GUI is recommended. As TimeShit must be run as root and you are usually logged in via SSH, you have to enable X11 forwarding for root before running timeshift-gtk : $ xauth list $DISPLAY host/unix:10 MIT-MAGIC-COOKIE-1 742d024faeb3d29a15ff06f1b8c3b21e $ echo $DISPLAY localhost:10.0 $ sudo -s # xauth add host/unix:10 MIT-MAGIC-COOKIE-1 742d024faeb3d29a15ff06f1b8c3b21e # export DISPLAY=localhost:10.0 # timeshift-gtk","title":"Backup with Timeshift"},{"location":"system/timeshift/#booting-different-efi-entries","text":"Every machine has a ~Playback~ and a ~Development~ (~Entwicklung~) installation. They are on separate drives. On PS-1 you can repeatedly press F12 on startup to get to the EFI boot menu. efibootmgr -v efibootmgr -c -d /dev/sda -p 1 -L 'SATA Entwicklung' -l '\\EFI\\ubuntu\\shimx64.efi' efibootmgr -c -d /dev/nvme0n1 -p 1 -L 'NVME Playback' -l '\\EFI\\ubuntu\\shimx64.efi' efibootmgr -n 0001 efibootmgr -o 0002,0004,0008,0009,000A,000B","title":"Booting different EFI entries"}]}